{"ast":null,"code":"const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\nconst LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\nconst UINT32_MAX = -1 >>> 0;\nconst UINT32_SIZE = UINT32_MAX + 1;\nconst INT32_SIZE = UINT32_SIZE / 2;\nconst INT32_MAX = INT32_SIZE - 1;\nconst UINT21_SIZE = 1 << 21;\nconst UINT21_MAX = UINT21_SIZE - 1;\n\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\nfunction int32(engine) {\n  return engine.next() | 0;\n}\nfunction add(distribution, addend) {\n  if (addend === 0) {\n    return distribution;\n  } else {\n    return engine => distribution(engine) + addend;\n  }\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\nfunction int53(engine) {\n  const high = engine.next() | 0;\n  const low = engine.next() >>> 0;\n  return (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\nfunction int53Full(engine) {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & 0x400000) {\n      if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n    }\n  }\n}\n\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\nfunction uint32(engine) {\n  return engine.next() >>> 0;\n}\n\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\nfunction uint53(engine) {\n  const high = engine.next() & UINT21_MAX;\n  const low = engine.next() >>> 0;\n  return high * UINT32_SIZE + low;\n}\n\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\nfunction uint53Full(engine) {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & UINT21_SIZE) {\n      if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (high & UINT21_MAX) * UINT32_SIZE + low;\n    }\n  }\n}\nfunction isPowerOfTwoMinusOne(value) {\n  return (value + 1 & value) === 0;\n}\nfunction bitmask(masking) {\n  return engine => engine.next() & masking;\n}\nfunction downscaleToLoopCheckedRange(range) {\n  const extendedRange = range + 1;\n  const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\n  return engine => {\n    let value = 0;\n    do {\n      value = engine.next() >>> 0;\n    } while (value >= maximum);\n    return value % extendedRange;\n  };\n}\nfunction downscaleToRange(range) {\n  if (isPowerOfTwoMinusOne(range)) {\n    return bitmask(range);\n  } else {\n    return downscaleToLoopCheckedRange(range);\n  }\n}\nfunction isEvenlyDivisibleByMaxInt32(value) {\n  return (value | 0) === 0;\n}\nfunction upscaleWithHighMasking(masking) {\n  return engine => {\n    const high = engine.next() & masking;\n    const low = engine.next() >>> 0;\n    return high * UINT32_SIZE + low;\n  };\n}\nfunction upscaleToLoopCheckedRange(extendedRange) {\n  const maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() & UINT21_MAX;\n      const low = engine.next() >>> 0;\n      ret = high * UINT32_SIZE + low;\n    } while (ret >= maximum);\n    return ret % extendedRange;\n  };\n}\nfunction upscaleWithinU53(range) {\n  const extendedRange = range + 1;\n  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n    const highRange = (extendedRange / UINT32_SIZE | 0) - 1;\n    if (isPowerOfTwoMinusOne(highRange)) {\n      return upscaleWithHighMasking(highRange);\n    }\n  }\n  return upscaleToLoopCheckedRange(extendedRange);\n}\nfunction upscaleWithinI53AndLoopCheck(min, max) {\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() | 0;\n      const low = engine.next() >>> 0;\n      ret = (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n    } while (ret < min || ret > max);\n    return ret;\n  };\n}\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\nfunction integer(min, max) {\n  min = Math.floor(min);\n  max = Math.floor(max);\n  if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\n    throw new RangeError(`Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`);\n  } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\n    throw new RangeError(`Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`);\n  }\n  const range = max - min;\n  if (range <= 0 || !isFinite(range)) {\n    return () => min;\n  } else if (range === UINT32_MAX) {\n    if (min === 0) {\n      return uint32;\n    } else {\n      return add(int32, min + INT32_SIZE);\n    }\n  } else if (range < UINT32_MAX) {\n    return add(downscaleToRange(range), min);\n  } else if (range === LARGEST_SAFE_INTEGER) {\n    return add(uint53, min);\n  } else if (range < LARGEST_SAFE_INTEGER) {\n    return add(upscaleWithinU53(range), min);\n  } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\n    return add(uint53Full, min);\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\n    return int53Full;\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\n    return int53;\n  } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\n    return add(int53, 1);\n  } else if (max === SMALLEST_UNSAFE_INTEGER) {\n    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n  } else {\n    return upscaleWithinI53AndLoopCheck(min, max);\n  }\n}\nfunction isLeastBitTrue(engine) {\n  return (engine.next() & 1) === 1;\n}\nfunction lessThan(distribution, value) {\n  return engine => distribution(engine) < value;\n}\nfunction probability(percentage) {\n  if (percentage <= 0) {\n    return () => false;\n  } else if (percentage >= 1) {\n    return () => true;\n  } else {\n    const scaled = percentage * UINT32_SIZE;\n    if (scaled % 1 === 0) {\n      return lessThan(int32, scaled - INT32_SIZE | 0);\n    } else {\n      return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\n    }\n  }\n}\nfunction bool(numerator, denominator) {\n  if (denominator == null) {\n    if (numerator == null) {\n      return isLeastBitTrue;\n    }\n    return probability(numerator);\n  } else {\n    if (numerator <= 0) {\n      return () => false;\n    } else if (numerator >= denominator) {\n      return () => true;\n    }\n    return lessThan(integer(0, denominator - 1), numerator);\n  }\n}\n\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\nfunction date(start, end) {\n  const distribution = integer(+start, +end);\n  return engine => new Date(distribution(engine));\n}\n\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\nfunction die(sideCount) {\n  return integer(1, sideCount);\n}\n\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\nfunction dice(sideCount, dieCount) {\n  const distribution = die(sideCount);\n  return engine => {\n    const result = [];\n    for (let i = 0; i < dieCount; ++i) {\n      result.push(distribution(engine));\n    }\n    return result;\n  };\n}\n\n// tslint:disable:unified-signatures\n// has 2**x chars, for faster uniform distribution\nconst DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\nfunction string() {\n  let pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STRING_POOL;\n  const poolLength = pool.length;\n  if (!poolLength) {\n    throw new Error(\"Expected pool not to be an empty string\");\n  }\n  const distribution = integer(0, poolLength - 1);\n  return (engine, length) => {\n    let result = \"\";\n    for (let i = 0; i < length; ++i) {\n      const j = distribution(engine);\n      result += pool.charAt(j);\n    }\n    return result;\n  };\n}\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\nconst lowerHex = string(LOWER_HEX_POOL);\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\nfunction hex(uppercase) {\n  if (uppercase) {\n    return upperHex;\n  } else {\n    return lowerHex;\n  }\n}\nfunction convertSliceArgument(value, length) {\n  if (value < 0) {\n    return Math.max(value + length, 0);\n  } else {\n    return Math.min(value, length);\n  }\n}\nfunction toInteger(value) {\n  const num = +value;\n  if (num < 0) {\n    return Math.ceil(num);\n  } else {\n    return Math.floor(num);\n  }\n}\n\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\nfunction pick(engine, source, begin, end) {\n  const length = source.length;\n  if (length === 0) {\n    throw new RangeError(\"Cannot pick from an empty array\");\n  }\n  const start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n  const finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n  if (start >= finish) {\n    throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\n  }\n  const distribution = integer(start, finish - 1);\n  return source[distribution(engine)];\n}\nfunction multiply(distribution, multiplier) {\n  if (multiplier === 1) {\n    return distribution;\n  } else if (multiplier === 0) {\n    return () => 0;\n  } else {\n    return engine => distribution(engine) * multiplier;\n  }\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\nfunction realZeroToOneExclusive(engine) {\n  return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\nfunction realZeroToOneInclusive(engine) {\n  return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\nfunction real(min, max) {\n  let inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!isFinite(min)) {\n    throw new RangeError(\"Expected min to be a finite number\");\n  } else if (!isFinite(max)) {\n    throw new RangeError(\"Expected max to be a finite number\");\n  }\n  return add(multiply(inclusive ? realZeroToOneInclusive : realZeroToOneExclusive, max - min), min);\n}\nconst sliceArray = Array.prototype.slice;\n\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\nfunction shuffle(engine, array) {\n  let downTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const length = array.length;\n  if (length) {\n    for (let i = length - 1 >>> 0; i > downTo; --i) {\n      const distribution = integer(0, i);\n      const j = distribution(engine);\n      if (i !== j) {\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n      }\n    }\n  }\n  return array;\n}\n\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\nfunction sample(engine, population, sampleSize) {\n  if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {\n    throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\n  }\n  if (sampleSize === 0) {\n    return [];\n  }\n  const clone = sliceArray.call(population);\n  const length = clone.length;\n  if (length === sampleSize) {\n    return shuffle(engine, clone, 0);\n  }\n  const tailLength = length - sampleSize;\n  return shuffle(engine, clone, tailLength - 1).slice(tailLength);\n}\nconst stringRepeat = (() => {\n  try {\n    if (\"x\".repeat(3) === \"xxx\") {\n      return (pattern, count) => pattern.repeat(count);\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (pattern, count) => {\n    let result = \"\";\n    while (count > 0) {\n      if (count & 1) {\n        result += pattern;\n      }\n      count >>= 1;\n      pattern += pattern;\n    }\n    return result;\n  };\n})();\nfunction zeroPad(text, zeroCount) {\n  return stringRepeat(\"0\", zeroCount - text.length) + text;\n}\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\nfunction uuid4(engine) {\n  const a = engine.next() >>> 0;\n  const b = engine.next() | 0;\n  const c = engine.next() | 0;\n  const d = engine.next() >>> 0;\n  return zeroPad(a.toString(16), 8) + \"-\" + zeroPad((b & 0xffff).toString(16), 4) + \"-\" + zeroPad((b >> 4 & 0x0fff | 0x4000).toString(16), 4) + \"-\" + zeroPad((c & 0x3fff | 0x8000).toString(16), 4) + \"-\" + zeroPad((c >> 4 & 0xffff).toString(16), 4) + zeroPad(d.toString(16), 8);\n}\n\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\nconst nativeMath = {\n  next() {\n    return Math.random() * UINT32_SIZE | 0;\n  }\n};\n\n// tslint:disable:unified-signatures\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\nclass Random {\n  /**\r\n   * Creates a new Random wrapper\r\n   * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n   */\n  constructor() {\n    let engine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nativeMath;\n    this.engine = engine;\n  }\n  /**\r\n   * Returns a value within [-0x80000000, 0x7fffffff]\r\n   */\n  int32() {\n    return int32(this.engine);\n  }\n  /**\r\n   * Returns a value within [0, 0xffffffff]\r\n   */\n  uint32() {\n    return uint32(this.engine);\n  }\n  /**\r\n   * Returns a value within [0, 0x1fffffffffffff]\r\n   */\n  uint53() {\n    return uint53(this.engine);\n  }\n  /**\r\n   * Returns a value within [0, 0x20000000000000]\r\n   */\n  uint53Full() {\n    return uint53Full(this.engine);\n  }\n  /**\r\n   * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n   */\n  int53() {\n    return int53(this.engine);\n  }\n  /**\r\n   * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n   */\n  int53Full() {\n    return int53Full(this.engine);\n  }\n  /**\r\n   * Returns a value within [min, max]\r\n   * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n   * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n   */\n  integer(min, max) {\n    return integer(min, max)(this.engine);\n  }\n  /**\r\n   * Returns a floating-point value within [0.0, 1.0]\r\n   */\n  realZeroToOneInclusive() {\n    return realZeroToOneInclusive(this.engine);\n  }\n  /**\r\n   * Returns a floating-point value within [0.0, 1.0)\r\n   */\n  realZeroToOneExclusive() {\n    return realZeroToOneExclusive(this.engine);\n  }\n  /**\r\n   * Returns a floating-point value within [min, max) or [min, max]\r\n   * @param min The minimum floating-point value, inclusive.\r\n   * @param max The maximum floating-point value.\r\n   * @param inclusive If true, `max` will be inclusive.\r\n   */\n  real(min, max) {\n    let inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return real(min, max, inclusive)(this.engine);\n  }\n  bool(numerator, denominator) {\n    return bool(numerator, denominator)(this.engine);\n  }\n  /**\r\n   * Return a random value within the provided `source` within the sliced\r\n   * bounds of `begin` and `end`.\r\n   * @param source an array of items to pick from\r\n   * @param begin the beginning slice index (defaults to `0`)\r\n   * @param end the ending slice index (defaults to `source.length`)\r\n   */\n  pick(source, begin, end) {\n    return pick(this.engine, source, begin, end);\n  }\n  /**\r\n   * Shuffles an array in-place\r\n   * @param array The array to shuffle\r\n   */\n  shuffle(array) {\n    return shuffle(this.engine, array);\n  }\n  /**\r\n   * From the population array, returns an array with sampleSize elements that\r\n   * are randomly chosen without repeats.\r\n   * @param population An array that has items to choose a sample from\r\n   * @param sampleSize The size of the result array\r\n   */\n  sample(population, sampleSize) {\n    return sample(this.engine, population, sampleSize);\n  }\n  /**\r\n   * Returns a value within [1, sideCount]\r\n   * @param sideCount The number of sides of the die\r\n   */\n  die(sideCount) {\n    return die(sideCount)(this.engine);\n  }\n  /**\r\n   * Returns an array of length `dieCount` of values within [1, sideCount]\r\n   * @param sideCount The number of sides of each die\r\n   * @param dieCount The number of dice\r\n   */\n  dice(sideCount, dieCount) {\n    return dice(sideCount, dieCount)(this.engine);\n  }\n  /**\r\n   * Returns a Universally Unique Identifier Version 4.\r\n   *\r\n   * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n   */\n  uuid4() {\n    return uuid4(this.engine);\n  }\n  string(length, pool) {\n    return string(pool)(this.engine, length);\n  }\n  /**\r\n   * Returns a random string comprised of numbers or the characters `abcdef`\r\n   * (or `ABCDEF`) of length `length`.\r\n   * @param length Length of the result string\r\n   * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n   */\n  hex(length, uppercase) {\n    return hex(uppercase)(this.engine, length);\n  }\n  /**\r\n   * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n   * @param start The minimum `Date`\r\n   * @param end The maximum `Date`\r\n   */\n  date(start, end) {\n    return date(start, end)(this.engine);\n  }\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\nconst I32Array = (() => {\n  try {\n    const buffer = new ArrayBuffer(4);\n    const view = new Int32Array(buffer);\n    view[0] = INT32_SIZE;\n    if (view[0] === -INT32_SIZE) {\n      return Int32Array;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return Array;\n})();\nlet data = null;\nconst COUNT = 128;\nlet index = COUNT;\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\nconst browserCrypto = {\n  next() {\n    if (index >= COUNT) {\n      if (data === null) {\n        data = new I32Array(COUNT);\n      }\n      crypto.getRandomValues(data);\n      index = 0;\n    }\n    return data[index++] | 0;\n  }\n};\n\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\nfunction createEntropy() {\n  let engine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nativeMath;\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  const array = [];\n  array.push(new Date().getTime() | 0);\n  for (let i = 1; i < length; ++i) {\n    array[i] = engine.next() | 0;\n  }\n  return array;\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\nconst imul = (() => {\n  try {\n    if (Math.imul(UINT32_MAX, 5) === -5) {\n      return Math.imul;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  const UINT16_MAX = 0xffff;\n  return (a, b) => {\n    const ah = a >>> 16 & UINT16_MAX;\n    const al = a & UINT16_MAX;\n    const bh = b >>> 16 & UINT16_MAX;\n    const bl = b & UINT16_MAX;\n    // the shift by 0 fixes the sign on the high part\n    // the final |0 converts the unsigned value into a signed value\n    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n  };\n})();\nconst ARRAY_SIZE = 624;\nconst ARRAY_MAX = ARRAY_SIZE - 1;\nconst M = 397;\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\nconst A = 0x9908b0df;\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\nclass MersenneTwister19937 {\n  /**\r\n   * MersenneTwister19937 should not be instantiated directly.\r\n   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n   */\n  constructor() {\n    this.data = new I32Array(ARRAY_SIZE);\n    this.index = 0; // integer within [0, 624]\n    this.uses = 0;\n  }\n  /**\r\n   * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n   * @param initial the initial seed value\r\n   */\n  static seed(initial) {\n    return new MersenneTwister19937().seed(initial);\n  }\n  /**\r\n   * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n   * @param source A series of int32 values\r\n   */\n  static seedWithArray(source) {\n    return new MersenneTwister19937().seedWithArray(source);\n  }\n  /**\r\n   * Returns a MersenneTwister19937 seeded with the current time and\r\n   * a series of natively-generated random values\r\n   */\n  static autoSeed() {\n    return MersenneTwister19937.seedWithArray(createEntropy());\n  }\n  /**\r\n   * Returns the next int32 value of the sequence\r\n   */\n  next() {\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n    const value = this.data[this.index];\n    this.index = this.index + 1 | 0;\n    this.uses += 1;\n    return temper(value) | 0;\n  }\n  /**\r\n   * Returns the number of times that the Engine has been used.\r\n   *\r\n   * This can be provided to an unused MersenneTwister19937 with the same\r\n   * seed, bringing it to the exact point that was left off.\r\n   */\n  getUseCount() {\n    return this.uses;\n  }\n  /**\r\n   * Discards one or more items from the engine\r\n   * @param count The count of items to discard\r\n   */\n  discard(count) {\n    if (count <= 0) {\n      return this;\n    }\n    this.uses += count;\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n    while (count + this.index > ARRAY_SIZE) {\n      count -= ARRAY_SIZE - this.index;\n      refreshData(this.data);\n      this.index = 0;\n    }\n    this.index = this.index + count | 0;\n    return this;\n  }\n  seed(initial) {\n    let previous = 0;\n    this.data[0] = previous = initial | 0;\n    for (let i = 1; i < ARRAY_SIZE; i = i + 1 | 0) {\n      this.data[i] = previous = imul(previous ^ previous >>> 30, 0x6c078965) + i | 0;\n    }\n    this.index = ARRAY_SIZE;\n    this.uses = 0;\n    return this;\n  }\n  seedWithArray(source) {\n    this.seed(0x012bd6aa);\n    seedWithArray(this.data, source);\n    return this;\n  }\n}\nfunction refreshData(data) {\n  let k = 0;\n  let tmp = 0;\n  for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = k + 1 | 0) {\n    tmp = data[k] & INT32_SIZE | data[k + 1 | 0] & INT32_MAX;\n    data[k] = data[k + M | 0] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);\n  }\n  for (; (k | 0) < ARRAY_MAX; k = k + 1 | 0) {\n    tmp = data[k] & INT32_SIZE | data[k + 1 | 0] & INT32_MAX;\n    data[k] = data[k - ARRAY_SIZE_MINUS_M | 0] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);\n  }\n  tmp = data[ARRAY_MAX] & INT32_SIZE | data[0] & INT32_MAX;\n  data[ARRAY_MAX] = data[M - 1] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);\n}\nfunction temper(value) {\n  value ^= value >>> 11;\n  value ^= value << 7 & 0x9d2c5680;\n  value ^= value << 15 & 0xefc60000;\n  return value ^ value >>> 18;\n}\nfunction seedWithArray(data, source) {\n  let i = 1;\n  let j = 0;\n  const sourceLength = source.length;\n  let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\n  let previous = data[0] | 0;\n  for (; (k | 0) > 0; --k) {\n    data[i] = previous = (data[i] ^ imul(previous ^ previous >>> 30, 0x0019660d)) + (source[j] | 0) + (j | 0) | 0;\n    i = i + 1 | 0;\n    ++j;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n    if (j >= sourceLength) {\n      j = 0;\n    }\n  }\n  for (k = ARRAY_MAX; (k | 0) > 0; --k) {\n    data[i] = previous = (data[i] ^ imul(previous ^ previous >>> 30, 0x5d588b65)) - i | 0;\n    i = i + 1 | 0;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n  }\n  data[0] = INT32_SIZE;\n}\nlet data$1 = null;\nconst COUNT$1 = 128;\nlet index$1 = COUNT$1;\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\nconst nodeCrypto = {\n  next() {\n    if (index$1 >= COUNT$1) {\n      data$1 = new Int32Array(new Int8Array(require(\"crypto\").randomBytes(4 * COUNT$1)).buffer);\n      index$1 = 0;\n    }\n    return data$1[index$1++] | 0;\n  }\n};\n\n/**\r\n * Returns a Distribution to random value within the provided `source`\r\n * within the sliced bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\nfunction picker(source, begin, end) {\n  const clone = sliceArray.call(source, begin, end);\n  if (clone.length === 0) {\n    throw new RangeError(`Cannot pick from a source with no items`);\n  }\n  const distribution = integer(0, clone.length - 1);\n  return engine => clone[distribution(engine)];\n}\nexport { Random, browserCrypto, nativeMath, MersenneTwister19937, nodeCrypto, bool, date, dice, die, hex, int32, int53, int53Full, integer, pick, picker, real, realZeroToOneExclusive, realZeroToOneInclusive, sample, shuffle, string, uint32, uint53, uint53Full, uuid4, createEntropy };","map":{"version":3,"mappings":"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","names":["SMALLEST_UNSAFE_INTEGER","LARGEST_SAFE_INTEGER","UINT32_MAX","UINT32_SIZE","INT32_SIZE","INT32_MAX","UINT21_SIZE","UINT21_MAX","int32","engine","next","add","distribution","addend","int53","high","low","int53Full","uint32","uint53","uint53Full","isPowerOfTwoMinusOne","value","bitmask","masking","downscaleToLoopCheckedRange","range","extendedRange","maximum","Math","floor","downscaleToRange","isEvenlyDivisibleByMaxInt32","upscaleWithHighMasking","upscaleToLoopCheckedRange","ret","upscaleWithinU53","highRange","upscaleWithinI53AndLoopCheck","min","max","integer","isFinite","RangeError","isLeastBitTrue","lessThan","probability","percentage","scaled","round","bool","numerator","denominator","date","start","end","Date","die","sideCount","dice","dieCount","result","i","push","DEFAULT_STRING_POOL","string","pool","poolLength","length","Error","j","charAt","LOWER_HEX_POOL","lowerHex","upperHex","toUpperCase","hex","uppercase","convertSliceArgument","toInteger","num","ceil","pick","source","begin","finish","multiply","multiplier","realZeroToOneExclusive","realZeroToOneInclusive","real","inclusive","sliceArray","Array","prototype","slice","shuffle","array","downTo","tmp","sample","population","sampleSize","clone","call","tailLength","stringRepeat","repeat","pattern","count","_","zeroPad","text","zeroCount","uuid4","a","b","c","d","toString","nativeMath","random","Random","constructor","I32Array","buffer","ArrayBuffer","view","Int32Array","data","COUNT","index","browserCrypto","crypto","getRandomValues","createEntropy","getTime","imul","UINT16_MAX","ah","al","bh","bl","ARRAY_SIZE","ARRAY_MAX","M","ARRAY_SIZE_MINUS_M","A","MersenneTwister19937","seed","initial","seedWithArray","autoSeed","refreshData","uses","temper","getUseCount","discard","previous","k","sourceLength","nodeCrypto","Int8Array","require","randomBytes","picker"],"sources":["C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\constants.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\int32.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\add.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\int53.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\int53Full.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\uint32.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\uint53.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\uint53Full.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\integer.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\bool.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\date.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\die.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\dice.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\string.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\hex.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\convertSliceArgument.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\toInteger.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\pick.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\multiply.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\realZeroToOneExclusive.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\realZeroToOneInclusive.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\real.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\sliceArray.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\shuffle.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\sample.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\stringRepeat.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\uuid4.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\engine\\nativeMath.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\Random.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\Int32Array.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\engine\\browserCrypto.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\createEntropy.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\utils\\imul.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\engine\\MersenneTwister19937.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\engine\\nodeCrypto.ts","C:\\Users\\aniru\\Documents\\leers\\node_modules\\random-js\\src\\distribution\\picker.ts"],"sourcesContent":["export const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\nexport const LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\nexport const UINT32_MAX = -1 >>> 0;\nexport const UINT32_SIZE = UINT32_MAX + 1;\nexport const INT32_SIZE = UINT32_SIZE / 2;\nexport const INT32_MAX = INT32_SIZE - 1;\nexport const UINT21_SIZE = 1 << 21;\nexport const UINT21_MAX = UINT21_SIZE - 1;\n","import { Engine } from \"../types\";\n\n/**\n * Returns a value within [-0x80000000, 0x7fffffff]\n */\nexport function int32(engine: Engine): number {\n  return engine.next() | 0;\n}\n","import { Distribution } from \"../types\";\n\nexport function add(distribution: Distribution, addend: number): Distribution {\n  if (addend === 0) {\n    return distribution;\n  } else {\n    return engine => distribution(engine) + addend;\n  }\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\n */\nexport function int53(engine: Engine): number {\n  const high = engine.next() | 0;\n  const low = engine.next() >>> 0;\n  return (\n    (high & UINT21_MAX) * UINT32_SIZE +\n    low +\n    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\n  );\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [-0x20000000000000, 0x20000000000000]\n */\nexport function int53Full(engine: Engine): number {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & 0x400000) {\n      if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (\n        (high & UINT21_MAX) * UINT32_SIZE +\n        low +\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\n      );\n    }\n  }\n}\n","import { Engine } from \"../types\";\n\n/**\n * Returns a value within [0, 0xffffffff]\n */\nexport function uint32(engine: Engine): number {\n  return engine.next() >>> 0;\n}\n","import { Engine } from \"../types\";\nimport { UINT21_MAX, UINT32_SIZE } from \"../utils/constants\";\n\n/**\n * Returns a value within [0, 0x1fffffffffffff]\n */\nexport function uint53(engine: Engine): number {\n  const high = engine.next() & UINT21_MAX;\n  const low = engine.next() >>> 0;\n  return high * UINT32_SIZE + low;\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [0, 0x20000000000000]\n */\nexport function uint53Full(engine: Engine): number {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & UINT21_SIZE) {\n      if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (high & UINT21_MAX) * UINT32_SIZE + low;\n    }\n  }\n}\n","import { Distribution, Engine } from \"../types\";\nimport { add } from \"../utils/add\";\nimport {\n  INT32_SIZE,\n  LARGEST_SAFE_INTEGER,\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_MAX,\n  UINT32_SIZE\n} from \"../utils/constants\";\nimport { int32 } from \"./int32\";\nimport { int53 } from \"./int53\";\nimport { int53Full } from \"./int53Full\";\nimport { uint32 } from \"./uint32\";\nimport { uint53 } from \"./uint53\";\nimport { uint53Full } from \"./uint53Full\";\n\nfunction isPowerOfTwoMinusOne(value: number): boolean {\n  return ((value + 1) & value) === 0;\n}\n\nfunction bitmask(masking: number): Distribution {\n  return (engine: Engine) => engine.next() & masking;\n}\n\nfunction downscaleToLoopCheckedRange(range: number): Distribution {\n  const extendedRange = range + 1;\n  const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\n  return engine => {\n    let value = 0;\n    do {\n      value = engine.next() >>> 0;\n    } while (value >= maximum);\n    return value % extendedRange;\n  };\n}\n\nfunction downscaleToRange(range: number): Distribution {\n  if (isPowerOfTwoMinusOne(range)) {\n    return bitmask(range);\n  } else {\n    return downscaleToLoopCheckedRange(range);\n  }\n}\n\nfunction isEvenlyDivisibleByMaxInt32(value: number): boolean {\n  return (value | 0) === 0;\n}\n\nfunction upscaleWithHighMasking(masking: number): Distribution {\n  return engine => {\n    const high = engine.next() & masking;\n    const low = engine.next() >>> 0;\n    return high * UINT32_SIZE + low;\n  };\n}\n\nfunction upscaleToLoopCheckedRange(extendedRange: number): Distribution {\n  const maximum =\n    extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() & UINT21_MAX;\n      const low = engine.next() >>> 0;\n      ret = high * UINT32_SIZE + low;\n    } while (ret >= maximum);\n    return ret % extendedRange;\n  };\n}\n\nfunction upscaleWithinU53(range: number): Distribution {\n  const extendedRange = range + 1;\n  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n    const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\n    if (isPowerOfTwoMinusOne(highRange)) {\n      return upscaleWithHighMasking(highRange);\n    }\n  }\n  return upscaleToLoopCheckedRange(extendedRange);\n}\n\nfunction upscaleWithinI53AndLoopCheck(min: number, max: number): Distribution {\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() | 0;\n      const low = engine.next() >>> 0;\n      ret =\n        (high & UINT21_MAX) * UINT32_SIZE +\n        low +\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n    } while (ret < min || ret > max);\n    return ret;\n  };\n}\n\n/**\n * Returns a Distribution to return a value within [min, max]\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\n */\nexport function integer(min: number, max: number): Distribution {\n  min = Math.floor(min);\n  max = Math.floor(max);\n  if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\n    throw new RangeError(\n      `Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`\n    );\n  } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\n    throw new RangeError(\n      `Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`\n    );\n  }\n\n  const range = max - min;\n  if (range <= 0 || !isFinite(range)) {\n    return () => min;\n  } else if (range === UINT32_MAX) {\n    if (min === 0) {\n      return uint32;\n    } else {\n      return add(int32, min + INT32_SIZE);\n    }\n  } else if (range < UINT32_MAX) {\n    return add(downscaleToRange(range), min);\n  } else if (range === LARGEST_SAFE_INTEGER) {\n    return add(uint53, min);\n  } else if (range < LARGEST_SAFE_INTEGER) {\n    return add(upscaleWithinU53(range), min);\n  } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\n    return add(uint53Full, min);\n  } else if (\n    min === -SMALLEST_UNSAFE_INTEGER &&\n    max === SMALLEST_UNSAFE_INTEGER\n  ) {\n    return int53Full;\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\n    return int53;\n  } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\n    return add(int53, 1);\n  } else if (max === SMALLEST_UNSAFE_INTEGER) {\n    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n  } else {\n    return upscaleWithinI53AndLoopCheck(min, max);\n  }\n}\n","import { Distribution, Engine } from \"../types\";\nimport { INT32_SIZE, SMALLEST_UNSAFE_INTEGER, UINT32_SIZE } from \"../utils/constants\";\nimport { int32 } from \"./int32\";\nimport { integer } from \"./integer\";\nimport { uint53 } from \"./uint53\";\n\nfunction isLeastBitTrue(engine: Engine) {\n  return (engine.next() & 1) === 1;\n}\n\nfunction lessThan(\n  distribution: Distribution,\n  value: number\n): Distribution<boolean> {\n  return engine => distribution(engine) < value;\n}\n\nfunction probability(percentage: number) {\n  if (percentage <= 0) {\n    return () => false;\n  } else if (percentage >= 1) {\n    return () => true;\n  } else {\n    const scaled = percentage * UINT32_SIZE;\n    if (scaled % 1 === 0) {\n      return lessThan(int32, (scaled - INT32_SIZE) | 0);\n    } else {\n      return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\n    }\n  }\n}\n\n// tslint:disable:unified-signatures\n\n/**\n * Returns a boolean Distribution with 50% probability of being true or false\n */\nexport function bool(): Distribution<boolean>;\n/**\n * Returns a boolean Distribution with the provided `percentage` of being true\n * @param percentage A number within [0, 1] of how often the result should be `true`\n */\nexport function bool(percentage: number): Distribution<boolean>;\n/**\n * Returns a boolean Distribution with a probability of\n * `numerator` divided by `denominator` of being true\n * @param numerator The numerator of the probability\n * @param denominator The denominator of the probability\n */\nexport function bool(\n  numerator: number,\n  denominator: number\n): Distribution<boolean>;\nexport function bool(\n  numerator?: number,\n  denominator?: number\n): Distribution<boolean> {\n  if (denominator == null) {\n    if (numerator == null) {\n      return isLeastBitTrue;\n    }\n    return probability(numerator);\n  } else {\n    if (numerator! <= 0) {\n      return () => false;\n    } else if (numerator! >= denominator) {\n      return () => true;\n    }\n    return lessThan(integer(0, denominator - 1), numerator!);\n  }\n}\n","import { Distribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution that returns a random `Date` within the inclusive\n * range of [`start`, `end`].\n * @param start The minimum `Date`\n * @param end The maximum `Date`\n */\nexport function date(start: Date, end: Date): Distribution<Date> {\n  const distribution = integer(+start, +end);\n  return engine => new Date(distribution(engine));\n}\n","import { Distribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution to return a value within [1, sideCount]\n * @param sideCount The number of sides of the die\n */\nexport function die(sideCount: number): Distribution<number> {\n  return integer(1, sideCount);\n}\n","import { Distribution } from \"../types\";\nimport { die } from \"./die\";\n\n/**\n * Returns a distribution that returns an array of length `dieCount` of values\n * within [1, `sideCount`]\n * @param sideCount The number of sides of each die\n * @param dieCount The number of dice\n */\nexport function dice(\n  sideCount: number,\n  dieCount: number\n): Distribution<number[]> {\n  const distribution = die(sideCount);\n  return engine => {\n    const result = [];\n    for (let i = 0; i < dieCount; ++i) {\n      result.push(distribution(engine));\n    }\n    return result;\n  };\n}\n","import { StringDistribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n// tslint:disable:unified-signatures\n\n// has 2**x chars, for faster uniform distribution\nconst DEFAULT_STRING_POOL =\n  \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\n/**\n * Returns a distribution that returns a random string using numbers,\n * uppercase and lowercase letters, `_`, and `-` of length `length`.\n * @param length Length of the result string\n */\nexport function string(): StringDistribution;\n/**\n * Returns a distribution that returns a random string using the provided\n * string pool as the possible characters to choose from of length `length`.\n * @param length Length of the result string\n */\nexport function string(pool: string): StringDistribution;\nexport function string(pool: string = DEFAULT_STRING_POOL): StringDistribution {\n  const poolLength = pool.length;\n  if (!poolLength) {\n    throw new Error(\"Expected pool not to be an empty string\");\n  }\n\n  const distribution = integer(0, poolLength - 1);\n  return (engine, length) => {\n    let result = \"\";\n    for (let i = 0; i < length; ++i) {\n      const j = distribution(engine);\n      result += pool.charAt(j);\n    }\n    return result;\n  };\n}\n","import { StringDistribution } from \"../types\";\nimport { string } from \"./string\";\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\nconst lowerHex = string(LOWER_HEX_POOL);\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\n\n/**\n * Returns a Distribution that returns a random string comprised of numbers\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\n * @param length Length of the result string\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\n */\nexport function hex(uppercase?: boolean): StringDistribution {\n  if (uppercase) {\n    return upperHex;\n  } else {\n    return lowerHex;\n  }\n}\n","export function convertSliceArgument(value: number, length: number): number {\n  if (value < 0) {\n    return Math.max(value + length, 0);\n  } else {\n    return Math.min(value, length);\n  }\n}\n","export function toInteger(value: number) {\n  const num = +value;\n  if (num < 0) {\n    return Math.ceil(num);\n  } else {\n    return Math.floor(num);\n  }\n}\n","import { Engine } from \"../types\";\nimport { convertSliceArgument } from \"../utils/convertSliceArgument\";\nimport { toInteger } from \"../utils/toInteger\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a random value within the provided `source` within the sliced\n * bounds of `begin` and `end`.\n * @param source an array of items to pick from\n * @param begin the beginning slice index (defaults to `0`)\n * @param end the ending slice index (defaults to `source.length`)\n */\nexport function pick<T>(\n  engine: Engine,\n  source: ArrayLike<T>,\n  begin?: number,\n  end?: number\n): T {\n  const length = source.length;\n  if (length === 0) {\n    throw new RangeError(\"Cannot pick from an empty array\");\n  }\n  const start =\n    begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n  const finish =\n    end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n  if (start >= finish) {\n    throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\n  }\n  const distribution = integer(start, finish - 1);\n  return source[distribution(engine)];\n}\n","import { Distribution } from \"../types\";\n\nexport function multiply(\n  distribution: Distribution,\n  multiplier: number\n): Distribution {\n  if (multiplier === 1) {\n    return distribution;\n  } else if (multiplier === 0) {\n    return () => 0;\n  } else {\n    return engine => distribution(engine) * multiplier;\n  }\n}\n","import { Engine } from \"../types\";\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\nimport { uint53 } from \"./uint53\";\n\n/**\n * Returns a floating-point value within [0.0, 1.0)\n */\nexport function realZeroToOneExclusive(engine: Engine): number {\n  return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n","import { Engine } from \"../types\";\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\nimport { uint53Full } from \"./uint53Full\";\n\n/**\n * Returns a floating-point value within [0.0, 1.0]\n */\nexport function realZeroToOneInclusive(engine: Engine): number {\n  return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n","import { Distribution } from \"../types\";\nimport { add } from \"../utils/add\";\nimport { multiply } from \"../utils/multiply\";\nimport { realZeroToOneExclusive } from \"./realZeroToOneExclusive\";\nimport { realZeroToOneInclusive } from \"./realZeroToOneInclusive\";\n\n/**\n * Returns a floating-point value within [min, max) or [min, max]\n * @param min The minimum floating-point value, inclusive.\n * @param max The maximum floating-point value.\n * @param inclusive If true, `max` will be inclusive.\n */\nexport function real(\n  min: number,\n  max: number,\n  inclusive: boolean = false\n): Distribution {\n  if (!isFinite(min)) {\n    throw new RangeError(\"Expected min to be a finite number\");\n  } else if (!isFinite(max)) {\n    throw new RangeError(\"Expected max to be a finite number\");\n  }\n  return add(\n    multiply(\n      inclusive ? realZeroToOneInclusive : realZeroToOneExclusive,\n      max - min\n    ),\n    min\n  );\n}\n","export const sliceArray = Array.prototype.slice;\n","import { Engine } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Shuffles an array in-place\n * @param engine The Engine to use when choosing random values\n * @param array The array to shuffle\n * @param downTo minimum index to shuffle. Only used internally.\n */\nexport function shuffle<T>(\n  engine: Engine,\n  array: T[],\n  downTo: number = 0\n): T[] {\n  const length = array.length;\n  if (length) {\n    for (let i = (length - 1) >>> 0; i > downTo; --i) {\n      const distribution = integer(0, i);\n      const j = distribution(engine);\n      if (i !== j) {\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n      }\n    }\n  }\n  return array;\n}\n","import { Engine } from \"../types\";\nimport { sliceArray } from \"../utils/sliceArray\";\nimport { shuffle } from \"./shuffle\";\n\n/**\n * From the population array, produce an array with sampleSize elements that\n * are randomly chosen without repeats.\n * @param engine The Engine to use when choosing random values\n * @param population An array that has items to choose a sample from\n * @param sampleSize The size of the result array\n */\nexport function sample<T>(\n  engine: Engine,\n  population: ArrayLike<T>,\n  sampleSize: number\n): T[] {\n  if (\n    sampleSize < 0 ||\n    sampleSize > population.length ||\n    !isFinite(sampleSize)\n  ) {\n    throw new RangeError(\n      \"Expected sampleSize to be within 0 and the length of the population\"\n    );\n  }\n\n  if (sampleSize === 0) {\n    return [];\n  }\n\n  const clone = sliceArray.call(population);\n  const length = clone.length;\n  if (length === sampleSize) {\n    return shuffle(engine, clone, 0);\n  }\n  const tailLength = length - sampleSize;\n  return shuffle(engine, clone, tailLength - 1).slice(tailLength);\n}\n","export const stringRepeat = (() => {\n  try {\n    if ((\"x\" as any).repeat(3) === \"xxx\") {\n      return (pattern: string, count: number): string =>\n        (pattern as any).repeat(count);\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (pattern: string, count: number): string => {\n    let result = \"\";\n    while (count > 0) {\n      if (count & 1) {\n        result += pattern;\n      }\n      count >>= 1;\n      pattern += pattern;\n    }\n    return result;\n  };\n})();\n","import { Engine } from \"../types\";\nimport { stringRepeat } from \"../utils/stringRepeat\";\n\nfunction zeroPad(text: string, zeroCount: number) {\n  return stringRepeat(\"0\", zeroCount - text.length) + text;\n}\n\n/**\n * Returns a Universally Unique Identifier Version 4.\n *\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\n */\nexport function uuid4(engine: Engine) {\n  const a = engine.next() >>> 0;\n  const b = engine.next() | 0;\n  const c = engine.next() | 0;\n  const d = engine.next() >>> 0;\n\n  return (\n    zeroPad(a.toString(16), 8) +\n    \"-\" +\n    zeroPad((b & 0xffff).toString(16), 4) +\n    \"-\" +\n    zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n    \"-\" +\n    zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n    \"-\" +\n    zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n    zeroPad(d.toString(16), 8)\n  );\n}\n","import { Engine } from \"../types\";\nimport { UINT32_SIZE } from \"../utils/constants\";\n\n/**\n * An int32-producing Engine that uses `Math.random()`\n */\nexport const nativeMath: Engine = {\n  next() {\n    return (Math.random() * UINT32_SIZE) | 0;\n  }\n};\n","import { bool } from \"./distribution/bool\";\nimport { date } from \"./distribution/date\";\nimport { dice } from \"./distribution/dice\";\nimport { die } from \"./distribution/die\";\nimport { hex } from \"./distribution/hex\";\nimport { int32 } from \"./distribution/int32\";\nimport { int53 } from \"./distribution/int53\";\nimport { int53Full } from \"./distribution/int53Full\";\nimport { integer } from \"./distribution/integer\";\nimport { pick } from \"./distribution/pick\";\nimport { real } from \"./distribution/real\";\nimport { realZeroToOneExclusive } from \"./distribution/realZeroToOneExclusive\";\nimport { realZeroToOneInclusive } from \"./distribution/realZeroToOneInclusive\";\nimport { sample } from \"./distribution/sample\";\nimport { shuffle } from \"./distribution/shuffle\";\nimport { string } from \"./distribution/string\";\nimport { uint32 } from \"./distribution/uint32\";\nimport { uint53 } from \"./distribution/uint53\";\nimport { uint53Full } from \"./distribution/uint53Full\";\nimport { uuid4 } from \"./distribution/uuid4\";\nimport { nativeMath } from \"./engine/nativeMath\";\nimport { Engine } from \"./types\";\n\n// tslint:disable:unified-signatures\n\n/**\n * A wrapper around an Engine that provides easy-to-use methods for\n * producing values based on known distributions\n */\nexport class Random {\n  private readonly engine: Engine;\n\n  /**\n   * Creates a new Random wrapper\n   * @param engine The engine to use (defaults to a `Math.random`-based implementation)\n   */\n  constructor(engine: Engine = nativeMath) {\n    this.engine = engine;\n  }\n\n  /**\n   * Returns a value within [-0x80000000, 0x7fffffff]\n   */\n  public int32(): number {\n    return int32(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0xffffffff]\n   */\n  public uint32(): number {\n    return uint32(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0x1fffffffffffff]\n   */\n  public uint53(): number {\n    return uint53(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0x20000000000000]\n   */\n  public uint53Full(): number {\n    return uint53Full(this.engine);\n  }\n\n  /**\n   * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\n   */\n  public int53(): number {\n    return int53(this.engine);\n  }\n\n  /**\n   * Returns a value within [-0x20000000000000, 0x20000000000000]\n   */\n  public int53Full(): number {\n    return int53Full(this.engine);\n  }\n\n  /**\n   * Returns a value within [min, max]\n   * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\n   * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\n   */\n  public integer(min: number, max: number): number {\n    return integer(min, max)(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [0.0, 1.0]\n   */\n  public realZeroToOneInclusive(): number {\n    return realZeroToOneInclusive(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [0.0, 1.0)\n   */\n  public realZeroToOneExclusive(): number {\n    return realZeroToOneExclusive(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [min, max) or [min, max]\n   * @param min The minimum floating-point value, inclusive.\n   * @param max The maximum floating-point value.\n   * @param inclusive If true, `max` will be inclusive.\n   */\n  public real(min: number, max: number, inclusive: boolean = false): number {\n    return real(min, max, inclusive)(this.engine);\n  }\n\n  /**\n   * Returns a boolean with 50% probability of being true or false\n   */\n  public bool(): boolean;\n  /**\n   * Returns a boolean with the provided `percentage` of being true\n   * @param percentage A number within [0, 1] of how often the result should be `true`\n   */\n  public bool(percentage: number): boolean;\n  /**\n   * Returns a boolean with a probability of `numerator`/`denominator` of being true\n   * @param numerator The numerator of the probability\n   * @param denominator The denominator of the probability\n   */\n  public bool(numerator: number, denominator: number): boolean;\n  public bool(numerator?: number, denominator?: number): boolean {\n    return bool(numerator!, denominator!)(this.engine);\n  }\n\n  /**\n   * Return a random value within the provided `source` within the sliced\n   * bounds of `begin` and `end`.\n   * @param source an array of items to pick from\n   * @param begin the beginning slice index (defaults to `0`)\n   * @param end the ending slice index (defaults to `source.length`)\n   */\n  public pick<T>(source: ArrayLike<T>, begin?: number, end?: number): T {\n    return pick(this.engine, source, begin, end);\n  }\n\n  /**\n   * Shuffles an array in-place\n   * @param array The array to shuffle\n   */\n  public shuffle<T>(array: T[]): T[] {\n    return shuffle(this.engine, array);\n  }\n\n  /**\n   * From the population array, returns an array with sampleSize elements that\n   * are randomly chosen without repeats.\n   * @param population An array that has items to choose a sample from\n   * @param sampleSize The size of the result array\n   */\n  public sample<T>(population: ArrayLike<T>, sampleSize: number): T[] {\n    return sample(this.engine, population, sampleSize);\n  }\n\n  /**\n   * Returns a value within [1, sideCount]\n   * @param sideCount The number of sides of the die\n   */\n  public die(sideCount: number): number {\n    return die(sideCount)(this.engine);\n  }\n\n  /**\n   * Returns an array of length `dieCount` of values within [1, sideCount]\n   * @param sideCount The number of sides of each die\n   * @param dieCount The number of dice\n   */\n  public dice(sideCount: number, dieCount: number): number[] {\n    return dice(sideCount, dieCount)(this.engine);\n  }\n\n  /**\n   * Returns a Universally Unique Identifier Version 4.\n   *\n   * See http://en.wikipedia.org/wiki/Universally_unique_identifier\n   */\n  public uuid4(): string {\n    return uuid4(this.engine);\n  }\n\n  /**\n   * Returns a random string using numbers, uppercase and lowercase letters,\n   * `_`, and `-` of length `length`.\n   * @param length Length of the result string\n   */\n  public string(length: number): string;\n  /**\n   * Returns a random string using the provided string pool as the possible\n   * characters to choose from of length `length`.\n   * @param length Length of the result string\n   */\n  public string(length: number, pool: string): string;\n  public string(length: number, pool?: string): string {\n    return string(pool!)(this.engine, length);\n  }\n\n  /**\n   * Returns a random string comprised of numbers or the characters `abcdef`\n   * (or `ABCDEF`) of length `length`.\n   * @param length Length of the result string\n   * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\n   */\n  public hex(length: number, uppercase?: boolean): string {\n    return hex(uppercase)(this.engine, length);\n  }\n\n  /**\n   * Returns a random `Date` within the inclusive range of [`start`, `end`].\n   * @param start The minimum `Date`\n   * @param end The maximum `Date`\n   */\n  public date(start: Date, end: Date): Date {\n    return date(start, end)(this.engine);\n  }\n}\n","import { INT32_SIZE } from \"./constants\";\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n */\nconst I32Array: typeof Int32Array = (() => {\n  try {\n    const buffer = new ArrayBuffer(4);\n    const view = new Int32Array(buffer);\n    view[0] = INT32_SIZE;\n    if (view[0] === -INT32_SIZE) {\n      return Int32Array;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (Array as unknown) as typeof Int32Array;\n})();\nexport { I32Array as Int32Array };\n","import { Engine } from \"../types\";\nimport { Int32Array } from \"../utils/Int32Array\";\n\nlet data: Int32Array | null = null;\nconst COUNT = 128;\nlet index = COUNT;\n\n/**\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\n * which is typically available in modern browsers.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n *\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\n * likely `throw` on the first call to `next()`.\n */\nexport const browserCrypto: Engine = {\n  next() {\n    if (index >= COUNT) {\n      if (data === null) {\n        data = new Int32Array(COUNT);\n      }\n      crypto.getRandomValues(data);\n      index = 0;\n    }\n    return data![index++] | 0;\n  }\n};\n","import { nativeMath } from \"../engine/nativeMath\";\nimport { Engine } from \"../types\";\n\n/**\n * Returns an array of random int32 values, based on current time\n * and a random number engine\n *\n * @param engine an Engine to pull random values from, default `nativeMath`\n * @param length the length of the Array, minimum 1, default 16\n */\nexport function createEntropy(\n  engine: Engine = nativeMath,\n  length: number = 16\n): number[] {\n  const array: number[] = [];\n  array.push(new Date().getTime() | 0);\n  for (let i = 1; i < length; ++i) {\n    array[i] = engine.next() | 0;\n  }\n  return array;\n}\n","import { UINT32_MAX } from \"./constants\";\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n */\nexport const imul: (a: number, b: number) => number = (() => {\n  try {\n    if ((Math as any).imul(UINT32_MAX, 5) === -5) {\n      return (Math as any).imul;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  const UINT16_MAX = 0xffff;\n  return (a: number, b: number) => {\n    const ah = (a >>> 16) & UINT16_MAX;\n    const al = a & UINT16_MAX;\n    const bh = (b >>> 16) & UINT16_MAX;\n    const bl = b & UINT16_MAX;\n    // the shift by 0 fixes the sign on the high part\n    // the final |0 converts the unsigned value into a signed value\n    return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\n  };\n})();\n","import { Engine } from \"../types\";\nimport { INT32_MAX, INT32_SIZE } from \"../utils/constants\";\nimport { createEntropy } from \"../utils/createEntropy\";\nimport { imul } from \"../utils/imul\";\nimport { Int32Array } from \"../utils/Int32Array\";\n\nconst ARRAY_SIZE = 624;\nconst ARRAY_MAX = ARRAY_SIZE - 1;\nconst M = 397;\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\nconst A = 0x9908b0df;\n\n/**\n * An Engine that is a pseudorandom number generator using the Mersenne\n * Twister algorithm based on the prime 2**19937 − 1\n *\n * See http://en.wikipedia.org/wiki/Mersenne_twister\n */\nexport class MersenneTwister19937 implements Engine {\n  /**\n   * Returns a MersenneTwister19937 seeded with an initial int32 value\n   * @param initial the initial seed value\n   */\n  public static seed(initial: number): MersenneTwister19937 {\n    return new MersenneTwister19937().seed(initial);\n  }\n\n  /**\n   * Returns a MersenneTwister19937 seeded with zero or more int32 values\n   * @param source A series of int32 values\n   */\n  public static seedWithArray(source: ArrayLike<number>): MersenneTwister19937 {\n    return new MersenneTwister19937().seedWithArray(source);\n  }\n\n  /**\n   * Returns a MersenneTwister19937 seeded with the current time and\n   * a series of natively-generated random values\n   */\n  public static autoSeed(): MersenneTwister19937 {\n    return MersenneTwister19937.seedWithArray(createEntropy());\n  }\n\n  private readonly data = new Int32Array(ARRAY_SIZE);\n  private index = 0; // integer within [0, 624]\n  private uses = 0;\n\n  /**\n   * MersenneTwister19937 should not be instantiated directly.\n   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\n   */\n  private constructor() {}\n\n  /**\n   * Returns the next int32 value of the sequence\n   */\n  public next(): number {\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n\n    const value = this.data[this.index];\n    this.index = (this.index + 1) | 0;\n    this.uses += 1;\n    return temper(value) | 0;\n  }\n\n  /**\n   * Returns the number of times that the Engine has been used.\n   *\n   * This can be provided to an unused MersenneTwister19937 with the same\n   * seed, bringing it to the exact point that was left off.\n   */\n  public getUseCount(): number {\n    return this.uses;\n  }\n\n  /**\n   * Discards one or more items from the engine\n   * @param count The count of items to discard\n   */\n  public discard(count: number): this {\n    if (count <= 0) {\n      return this;\n    }\n    this.uses += count;\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n    while (count + this.index > ARRAY_SIZE) {\n      count -= ARRAY_SIZE - this.index;\n      refreshData(this.data);\n      this.index = 0;\n    }\n    this.index = (this.index + count) | 0;\n    return this;\n  }\n\n  private seed(initial: number): this {\n    let previous = 0;\n    this.data[0] = previous = initial | 0;\n\n    for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\n      this.data[i] = previous =\n        (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\n    }\n    this.index = ARRAY_SIZE;\n    this.uses = 0;\n    return this;\n  }\n\n  private seedWithArray(source: ArrayLike<number>): this {\n    this.seed(0x012bd6aa);\n    seedWithArray(this.data, source);\n    return this;\n  }\n}\n\nfunction refreshData(data: Int32Array) {\n  let k = 0;\n  let tmp = 0;\n  for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\n    data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n  }\n\n  for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\n    data[k] =\n      data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n  }\n\n  tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\n  data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n}\n\nfunction temper(value: number) {\n  value ^= value >>> 11;\n  value ^= (value << 7) & 0x9d2c5680;\n  value ^= (value << 15) & 0xefc60000;\n  return value ^ (value >>> 18);\n}\n\nfunction seedWithArray(data: Int32Array, source: ArrayLike<number>) {\n  let i = 1;\n  let j = 0;\n  const sourceLength = source.length;\n  let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\n  let previous = data[0] | 0;\n  for (; (k | 0) > 0; --k) {\n    data[i] = previous =\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\n        (source[j] | 0) +\n        (j | 0)) |\n      0;\n    i = (i + 1) | 0;\n    ++j;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n    if (j >= sourceLength) {\n      j = 0;\n    }\n  }\n  for (k = ARRAY_MAX; (k | 0) > 0; --k) {\n    data[i] = previous =\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\n    i = (i + 1) | 0;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n  }\n  data[0] = INT32_SIZE;\n}\n","import { Engine } from \"../types\";\n\nlet data: Int32Array | null = null;\nconst COUNT = 128;\nlet index = COUNT;\n\n/**\n * An Engine that relies on the node-available\n * `require('crypto').randomBytes`, which has been available since 0.58.\n *\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\n *\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\n * likely `throw` on the first call to `next()`.\n */\nexport const nodeCrypto: Engine = {\n  next() {\n    if (index >= COUNT) {\n      data = new Int32Array(\n        new Int8Array(require(\"crypto\").randomBytes(4 * COUNT)).buffer\n      );\n      index = 0;\n    }\n    return data![index++] | 0;\n  }\n};\n","import { Distribution } from \"../types\";\nimport { sliceArray } from \"../utils/sliceArray\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution to random value within the provided `source`\n * within the sliced bounds of `begin` and `end`.\n * @param source an array of items to pick from\n * @param begin the beginning slice index (defaults to `0`)\n * @param end the ending slice index (defaults to `source.length`)\n */\nexport function picker<T>(\n  source: ArrayLike<T>,\n  begin?: number,\n  end?: number\n): Distribution<T> {\n  const clone = sliceArray.call(source, begin, end);\n  if (clone.length === 0) {\n    throw new RangeError(`Cannot pick from a source with no items`);\n  }\n  const distribution = integer(0, clone.length - 1);\n  return engine => clone[distribution(engine)];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}