{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aniru\\\\Documents\\\\leers\\\\src\\\\Components\\\\Generate\\\\Generate.js\";\nimport React, { useState } from 'react';\nimport randomWords from 'better-random-words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Generate = () => {\n  const file = 'data.json';\n  const data = {};\n  for (let i = 0; i < 1000; i++) {\n    let word = '-';\n    while (word.length < 5) {\n      word = randomWords();\n    }\n    const start = word.substring(0, Math.floor(1 + Math.random() * 2));\n    const end = word.substring(word.length - Math.floor(1 + Math.random() * 2), word.length);\n    const date = new Date();\n    date.setDate(date.getDate() + i);\n    const dateStr = date.toISOString();\n    data[dateStr] = {\n      start: start,\n      end: end\n    };\n  }\n  console.log(JSON.stringify(data));\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Generate data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n_c = Generate;\nexport default Generate;\nvar _c;\n$RefreshReg$(_c, \"Generate\");","map":{"version":3,"names":["React","useState","randomWords","Generate","file","data","i","word","length","start","substring","Math","floor","random","end","date","Date","setDate","getDate","dateStr","toISOString","console","log","JSON","stringify"],"sources":["C:/Users/aniru/Documents/leers/src/Components/Generate/Generate.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport randomWords from 'better-random-words';\r\n\r\nconst Generate = () => {\r\n\tconst file = 'data.json';\r\n\tconst data = {};\r\n\r\n\tfor(let i = 0; i < 1000; i++) {\r\n\t\tlet word = '-';\r\n\t\twhile(word.length < 5) {\r\n\t\t\tword = randomWords();\r\n\t\t}\r\n\r\n\t\tconst start = word.substring(0,  Math.floor(1 + Math.random() * 2));\r\n\t\tconst end = word.substring(word.length - Math.floor(1 + Math.random() * 2), word.length);\r\n\r\n\t\tconst date = new Date();\r\n\t\tdate.setDate(date.getDate() + i);\r\n\r\n\t\tconst dateStr = date.toISOString();\r\n\r\n\t\tdata[dateStr] = {start: start, end: end};\r\n\t}\r\n\r\nconsole.log(JSON.stringify(data))\r\n\r\n\treturn(\r\n\t\t<h1>Generate data</h1>\r\n\t);\r\n}\r\n\r\nexport default Generate;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,qBAAqB;AAAC;AAE9C,MAAMC,QAAQ,GAAG,MAAM;EACtB,MAAMC,IAAI,GAAG,WAAW;EACxB,MAAMC,IAAI,GAAG,CAAC,CAAC;EAEf,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,EAAE,EAAE;IAC7B,IAAIC,IAAI,GAAG,GAAG;IACd,OAAMA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MACtBD,IAAI,GAAGL,WAAW,EAAE;IACrB;IAEA,MAAMO,KAAK,GAAGF,IAAI,CAACG,SAAS,CAAC,CAAC,EAAGC,IAAI,CAACC,KAAK,CAAC,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;IACnE,MAAMC,GAAG,GAAGP,IAAI,CAACG,SAAS,CAACH,IAAI,CAACC,MAAM,GAAGG,IAAI,CAACC,KAAK,CAAC,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC,EAAEN,IAAI,CAACC,MAAM,CAAC;IAExF,MAAMO,IAAI,GAAG,IAAIC,IAAI,EAAE;IACvBD,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,EAAE,GAAGZ,CAAC,CAAC;IAEhC,MAAMa,OAAO,GAAGJ,IAAI,CAACK,WAAW,EAAE;IAElCf,IAAI,CAACc,OAAO,CAAC,GAAG;MAACV,KAAK,EAAEA,KAAK;MAAEK,GAAG,EAAEA;IAAG,CAAC;EACzC;EAEDO,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACnB,IAAI,CAAC,CAAC;EAEhC,oBACC;IAAA,UAAI;EAAa;IAAA;IAAA;IAAA;EAAA,QAAK;AAExB,CAAC;AAAA,KA1BKF,QAAQ;AA4Bd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}